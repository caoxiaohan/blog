{
  "name": "Caoxiaohan",
  "tagline": "个人博客",
  "body": "# git 最佳实践.\r\n# 1 最佳实践\r\n## 1.1 管理纯文本文件\r\n    README.md文件，如果开头有#则作为标题在github网页中加粗显示\r\n## 1.2 使用.gitignore文件\r\n   详见《面试题92答案》第三大题第15页“如何忽略文件”\r\n## 1.3 使用分支多建分支，轻量级分支\r\n        git分支情况如下，提交代码时请务必清楚应该提交到哪个分支上。git操作push代码之前请务必先做pull操作，在本地解决完冲突后再push到远端，如在push时发现如有merge和rebase的提示，不要选merge而要选rebase。\r\n        ### 1.3.1、master分支：用于发布正式环境使用，不允许提交任何代码到该分支上。\r\n       ###  1.3.2、hotfix分支：用于处理正式环境的紧急BUG，仅在接到BUG修改任务时，由组长从master拉分支分配任务到个人，在该分支上进行修改。\r\n       ###  1.3.3、develop分支：用于保存所有的开发修改工作。不允许直接提交代码到该分支上。\r\n       ###  1.3.4、release分支：用于测试阶段提供测试版本。进入测试阶段后，正式发布前，开发均在该分支上进行修改。\r\n       ###  1.3.5、feature分支：特性分支，用于新功能开发。当一个版本需求内容确定后，开发完成进入测试前，均在指定的该feature分支上进行开发。进入测试后切换到release分支上进行开发。\r\n## 1.4 合理使用标签命名要规范\r\n   git tag v1.1.1：第一位大版本号，大功能发布时增加，技术负责人审核；第二位小版本号，增加小特性时增加，主开发审核；第三位BUG修复号，修复BUG用，修复人员负责。\r\n## 1.5 规范commit message写法 要把msg比较清晰明了的表明此次提交\r\n   git commit -m”修改了cxh.txt文件” 注释内容要清晰规范不要重复\r\n## 1.6 规范项目编码(推荐utf-8)\r\n   将开发工具的编码设置为uft-8编码，可以识别汉字。\r\n## 1.7尽量不要去改写历史\r\n   我们可以进行历史版本回退撤销历史区修改。如果仅仅撤销自己的手误修改无可厚非，但不要强制推送覆盖了别人的修改。\r\n   比如团队已经完成了注册、登录、好友模块开发，你回退到注册阶段，并强制推送到远程仓库，使得仓库里只有注册模块。\r\n## 1.8 尽量保持仓库较新 减少冲突的可能性\r\n   git push origin master 先从远程仓库拉取最新代码，再提交修改推送到远程仓库\r\n## 1.9 按照代码完成度提交\r\n   不要边修改变提交，不要过分频繁地提交。\r\n   集中修改后再一次性提交。\r\n   比如\r\n   echo 用户名验证 >> regedit.html \r\n   echo 邮箱验证 >> regedit.html\r\n   echo 手机验证 >> regedit.html\r\n   git add regedit.html //完成注册时字符合法性验证\r\n   echo 头像验证 >> regedit.html\r\n   git add regedit.html //完成注册时头像合法性验证\r\n   git commit -m”完成注册模块” //完成注册模块第一次提交\r\n\r\n  # 2 不推荐做的\r\n## 2.1 提交代码的目标产物，比编译结果，程序日志文件等\r\n   详见《面试题92答案》第三大题第15页“如何忽略文件”\r\n## 2.2 提交配置文件，每个人都不一样\r\n   不要提交配置文件,.config字样的文件。\r\n## 2.3 提交大型二进制文件，数据图片\r\n   不要提交非代码类大文件，大文件会造成pull拉取远程仓库到本地时耗费时间。\r\n## 2.4 使用GIT做文件备份工具（可以用网盘）\r\n   Github免费版是公开的，任何人都能看见，不要把私人文件放到github上备份。\r\n## 2.5 使用git push --force\r\n   强制删除文件和强制用本地仓库覆盖远程仓库使用git push --force，但是团地开发中不要这么做，这样会强制删除覆盖别人的劳动成功。\r\n## 2.6 使用git reset --hard {commitId} 都会导致丢失历史\r\n       ### 2.6.1 Soft，只回退历史区\r\n           git reset --soft {commitId}参数只告诉Git将其他的commit重置到HEAD，就仅此而已。index和working copy中的文件都不改变。\r\n       ### 2.6.2 Mixed (default)，回退历史区和工作区\r\n           git reset --mixed {commitId} 改变HEAD和index，指向那个你要reset到的commit上。而working copy文件不被改变。当然会显示工作目录下有修改，但没有缓存到index中。\r\n       ### 2.6.3 Hard 回退三个区\r\n           git reset --hard {commitId}同时改变 HEAD & index & working copy到你要reset到的那个commit上。这个参数很危险，执行了它，你的本地修改可能就丢失了。\r\n      提示：可以用git reflog命令查看commit ID，恢复到reset之前的状态。\r\n      补充相关术语：\r\n      HEAD：历史区，是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交\r\n      Index：暂存区，index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit\r\n   Working Copy：工作区，working copy代表你正在工作的那个文件集\r\n## 2.7 遇到冲突时强制选择一方合并\r\n  团队协作时，两个人修改了同一个文件，推送到远程仓库时会提示冲突。\r\n  我们即不能强制推送自己的修改，这样会覆盖远程仓库。\r\n  合并时也不能删除别人的修改后再提交，而应该合并后一起推送。\r\n  详见《面试题90答案》第八大题第24页如何解决冲突\r\n #  3 git 使用规范\r\n   详见 《Git源代码管理规范》",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}